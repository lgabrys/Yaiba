define(
  ['require', 'apres', 'jquery', 'bootstrap', 'underscore'],
  function(require, apres, $, bootstrap, _) {
    var WebhookWidget = function(elem, params) {
      var elem = $(elem);
      var table = elem.find(".table");
      var tmpl = $("#webhook-table-row");
      var loading = $("#webhook-loading");
      var header = $("#webhook-header");
      var none = $("#webhook-none");
      var compiled_template = _.template(tmpl.html());
      var loading_template = _.template(loading.html())
      var header_template = _.template(header.html())
      var none_template = _.template(none.html())
      var id_item_map;
      var results;

      function message(message, classes) {
        elem.find("div.alert").removeClass().addClass("alert " + classes).html(message).show();
      }

      function message_hide() {
        elem.find("div.alert").hide();
      }

      // Render the table
      function render(results) {
        // Reset contents of table
        table.html("");
        if (results.length == 0) {
          table.append(none_template());
        } else {
          table.append(header_template());
          // Reset id -> item map
          id_item_map = {};
          _.each(results, function(item) {
            var uuid = _.uniqueId("webhooks");
            id_item_map[uuid] = item;
            item.uuid = uuid;
            var el = compiled_template(item);
            table.append(el);
          });
        }
      }

      // Fetch & render the list of collaborators
      function load(url) {
        var el = loading_template();
        table.html(el);
        $.ajax({
          url: "/api/webhooks",
          type: "GET",
          data: {url: url},
          dataType: "json",
          success: function (data, ts, xhr) {
            results = data.results;
            render(results);
          },
          error: function(xhr, ts, e) {
            if (xhr && xhr.responseText) {
                var data = $.parseJSON(xhr.responseText);
                message("Error adding webhook: " + data.errors[0], "alert-error");
            } else {
                message("Error adding webhook: " + e, "alert-error");
            }
          }

        });
      }

      // Delete a webhook & render the list
      function del(url, webhook_id) {
        $.ajax({
          url: "/api/webhooks",
          type: "DELETE",
          data: {webhook_id: webhook_id, url: url},
          success: function(data, ts, xhr) {
            results = _.reject(results, function(item) {
              return item.webhook_id === webhook_id;
            });
            render(results);
            message("webhook removed.", "alert-success");
          },
          error: function(xhr, ts, e) {
            if (xhr && xhr.responseText) {
                var data = $.parseJSON(xhr.responseText);
                message("Error deleting webhook: " + data.errors[0], "alert-error");
            } else {
                message("Error deleting webhook: " + e, "alert-error");
            }
          }
        });
      }

      // Add a webhook
      function add(url, target_url, secret, type, title) {
        var data = {url: url, target_url:target_url, secret: secret};
        if (type) {
          data.type = type;
        }
        if (title) {
          data.title = title;
        }
        $.ajax({
          url: "/api/webhooks",
          type: "POST",
          data: data,
          dataType: "json",
          success: function(data, ts, xhr) {
            message("Webhook added.", "alert-success");
            load(repo_url);
          },
          error: function(xhr, ts, e) {
            if (xhr && xhr.responseText) {
                var data = $.parseJSON(xhr.responseText);
                message("Error adding webhook: " + data.errors[0], "alert-error");
            } else {
                message("Error adding webhook: " + e, "alert-error");
            }
          }
        });
      }

      // Handy bindings
      this.events = {
        'click .btn-add-webhook': function() {
          // Add
          var target_url = elem.find(".webhook-target-url").val();
          var secret = elem.find(".webhook-secret").val();
          // Simple validation
          if (target_url && target_url.length > 0) {
            add(repo_url, target_url, secret);
          } else {
            message("Invalid target URL", "alert-error");
          }
        },
        'click .icon-remove': function(ev) {
          var w = id_item_map[$(ev.target).attr('id')];
          del(repo_url, w.webhook_id);
        }
      };

      // There is a global "repo" object which is generated by the server
      var repo_url = apres.controller().params.repo_url;
      load(repo_url);

    };

    return WebhookWidget;
  }
);
