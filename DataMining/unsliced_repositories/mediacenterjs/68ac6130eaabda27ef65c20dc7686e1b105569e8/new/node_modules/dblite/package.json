{
  "version": "0.2.6",
  "engine": "node >= 0.6.0",
  "name": "dblite",
  "description": "a zero hassle wrapper for sqlite",
  "homepage": "https://github.com/WebReflection/dblite",
  "keywords": [
    "sqlite",
    "sqlite3",
    "shell",
    "query",
    "embedded",
    "arch linux",
    "raspberry pi",
    "cubieboard",
    "cubieboard2",
    "simple",
    "no gyp",
    "no compile",
    "no hassle",
    "wrap",
    "spawn"
  ],
  "author": {
    "name": "Andrea Giammarchi",
    "url": "http://webreflection.blogspot.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/WebReflection/dblite.git"
  },
  "main": "./build/dblite.node.js",
  "scripts": {
    "test": "node test/.test.js"
  },
  "readme": "dblite\n======\na zero hassle wrapper for sqlite\n```javascript\nvar dblite = require('dblite'),\n    db = dblite('file.name');\n\n// asynchronous, fast, and ...\ndb.query('SELECT * FROM table', function(rows) {\n  // ... that easy!\n});\n```\nMore in [the related blogpost](http://webreflection.blogspot.com/2013/07/dblite-sqlite3-for-nodejs-made-easy.html) and here too :-)\n\n\n[![NPM](https://nodei.co/npm/dblite.png?downloads=true)](https://nodei.co/npm/dblite/)\n\n\n### The What And The Why\nI've created `dblite` module because there's still not a simple and straight forward or standard way to have [sqlite](http://www.sqlite.org) in [node.js](http://nodejs.org) without requiring to re-compile, re-build, download sources a part or install dependencies instead of simply `apt-get install sqlite3` or `pacman -S sqlite` in your \\*nix system.\n\n`dblite` has been created with portability, simplicity, and reasonable performance for **embedded Hardware** such [Raspberry Pi](http://www.raspberrypi.org) and [Cubieboard](http://cubieboard.org) in mind.\n\nGenerally speaking all linux based distributions like [Arch Linux](https://www.archlinux.org), where is not always that easy to `node-gyp` a module and add dependencies that work, can now use this battle tested wrap and perform basic to advanced sqlite operations.\n\n\n### Bootstrap\nTo install dblite simply `npm install dblite` then in node:\n```javascript\nvar dblite = require('dblite'),\n    db = dblite('/folder/to/file.sqlite');\n\n// ready to go, i.e.\ndb.query('.databases');\ndb.query(\n  'SELECT * FROM users WHERE pass = ?',\n  [pass],\n  function (rows) {\n    var user = rows.length && rows[0];\n  }\n);\n```\nBy default the `dblite` function uses **sqlite3 as exacutable**. If you need to change the path simply update `dblite.bin = \"/usr/local/bin/sqlite3\";` before invoking the function.\n\n\n### API\nRight now a created `EventEmitter` `db` instance has 3 extra methods: `.query()`, `.lastRowID()`, and `.close()`.\n\nThe `.lastRowID(table, callback(rowid))` helper simplifies a common operation with SQL tables after inserts, handful as shortcut for the following query:\n`SELECT ROWID FROM ``table`` ORDER BY ROWID DESC LIMIT 1`.\n\nThe method `.close()` does exactly what it suggests: it closes the database connection.\nPlease note that it is **not possible to perform other operations once it has been closed**.\n\nBeing an `EventEmitter` instance, the database variable will be notified with the `close` listener, if any.\n\n\n### Understanding The .query() Method\nThe main role in this module is played by the `db.query()` method, a method rich in overloads all with perfect and natural meaning.\n\nThe amount of parameters goes from one to four, left to right, where left is the input going through the right which is the eventual output.\n\nAll parameters are optionals except the SQL one.\n\n### db.query() Possible Combinations\n```javascript\ndb.query(SQL)\ndb.query(SQL, callback:Function)\ndb.query(SQL, params:Array|Object)\ndb.query(SQL, fields:Array|Object)\ndb.query(SQL, params:Array|Object, callback:Function)\ndb.query(SQL, fields:Array|Object, callback:Function)\ndb.query(SQL, params:Array|Object, fields:Array|Object)\ndb.query(SQL, params:Array|Object, fields:Array|Object, callback:Function)\n```\nAll above combinations are [tested properly in this file](test/dblite.js) together with many other tests able to make `dblite` robust enough and ready to be used.\n\nPlease note how `params` is always before `fields` and/or `callback` if `fields` is missing, just as reminder that order is left to right accordingly with what we are trying to do.\n\nFollowing detailed explanation per each parameter.\n\n#### The SQL:string\nThis string [accepts any query understood by SQLite](http://www.sqlite.org/lang.html) plus it accepts all commands that regular SQLite shell would accept such `.databases`, `.tables`, `.show` and all others passing through the specified `info` listener, if any, using just the console as fallback otherwise.\n```javascript\nvar dblite = require('dblite'),\n    db = dblite('./db.sqlite');\n\n// will call the implicit `info` console.log\ndb.query('.show');\n/* will console.log something like:\n\n     echo: off\n  explain: off\n  headers: off\n     mode: csv\nnullvalue: \"\"\n   output: stdout\nseparator: \",\"\n    stats: off\n    width:\n*/\n\n// normal query\ndb.query('CREATE TABLE IF NOT EXISTS test (id INTEGER PRIMARY KEY, value TEXT)');\ndb.query('INSERT INTO test VALUES(null, ?)', ['some text']);\ndb.query('SELECT * FROM test');\n// will implicitly log the following\n// [ [ '1', 'some text' ] ]\n```\n\n#### The params:Array|Object\nIf the SQL string **contains special chars** such `?`, `:key`, `$key`, or `@key` properties, these will be replaced accordingly with the `params` `Array` or `Object` that, in this case, MUST be present.\n```javascript\n// params as Array\ndb.query('SELECT * FROM test WHERE id = ?', [1]);\n\n// params as Object\ndb.query('SELECT * FROM test WHERE id = :id', {id:1});\n// same as\ndb.query('SELECT * FROM test WHERE id = $id', {id:1});\n// same as\ndb.query('SELECT * FROM test WHERE id = @id', {id:1});\n```\n\n#### The fields:Array|Object\nBy default, results are returned as an `Array` where all rows are the outer `Array` and each single row is another `Array`.\n```javascript\ndb.query('SELECT * FROM test');\n// will log something like:\n[\n  [ '1', 'some text' ],     // row1\n  [ '2', 'something else' ] // rowN\n]\n```\nIf we specify a fields parameter we can have each row represented by an object, instead of an array.\n```javascript\n// same query using fields as Array\ndb.query('SELECT * FROM test', ['key', 'value']);\n// will log something like:\n[\n  {key: '1', value: 'some text'},     // row1\n  {key: '2', value: 'something else'} // rowN\n]\n```\n\n#### Parsing Through The fields:Object\n[SQLite Datatypes](http://www.sqlite.org/datatype3.html) are different from JavaScript plus SQLite works via affinity.\nThis module also parses sqlite3 output which is **always a string** and as string every result will always be returned **unless** we specify `fields` parameter as object, suggesting validation per each field.\n```javascript\n// same query using fields as Object\ndb.query('SELECT * FROM test', {\n  key: Number,\n  value: String\n});\n// note the key as integer!\n[\n  {key: 1, value: 'some text'},     // row1\n  {key: 2, value: 'something else'} // rowN\n]\n```\nMore complex validators/transformers can be passed without problems:\n```javascript\n// same query using fields as Object\ndb.query('SELECT * FROM `table.users`', {\n  id: Number,\n  name: String,\n  adult: Boolean,\n  skills: JSON.parse,\n  birthday: Date,\n  cube: function (fieldValue) {\n    return fieldValue * 3;\n  }\n});\n```\n\n#### The params:Array|Object AND The fields:Array|Object\nNot a surprise we can combine both params, using the left to right order input to output so **params first**!\n```javascript\n// same query using params AND fields\ndb.query('SELECT * FROM test WHERE id = :id', {\n  id: 1\n},{\n  key: Number,\n  value: String\n});\n\n// same as...\ndb.query('SELECT * FROM test WHERE id = ?', [1], ['key', 'value']);\n// same as...\ndb.query('SELECT * FROM test WHERE id = ?', [1], {\n  key: Number,\n  value: String\n});\n// same as...\ndb.query('SELECT * FROM test WHERE id = :id', {\n  id: 1\n}, [\n  'key', 'value'\n]);\n```\n\n#### The callback:Function\nWhen a `SELECT` or a `PRAGMA` `SQL` is executed the module puts itself in a *waiting for results* state.\nAs soon as results are fully pushed to the output the module parses this result and send it to the specified callback.\n\nThe callback is **always the last specified parameter**, if any, or the implicit equivalent of `console.log.bind(console)`.\nLatter case is simply helpful to operate directly via `node` **console** and see results without bothering writing a callback each `.query()` call.\n\n#### Extra Bonus: JSON Serialization With fields:Array|Object\nIf one field value is not scalar (boolean, number, string, null) `JSON.stringify` is performed in order to save data.\nThis helps lazy developers that don't want to pre parse every field and let `dblite` do the magic.\n```javascript\n// test has two fields, id and value\ndb.query('INSERT INTO test VALUES(?, ?)', [\n  123,\n  {name: 'dblite', rate: 'awesome'} // value serialized\n]);\n\n// use the fields to parse back the object\ndb.query('SELECT * FROM test WHERE id = ?', [123], {\n  id: Number,\n  value: JSON.parse // value unserialized\n}, function (rows) {\n  var record = rows[0];\n  console.log(record.id); // 123\n  console.log(record.value.name); // \"dblite\"\n  console.log(record.value.rate); // \"awesome\"\"\n});\n```\n\n### Handling Infos And Errors\nThe `EventEmitter` will notify any listener attached to `info` or `error` accordingly with the current status.\n```javascript\ndb.on('info', function (data) {\n  // show data returned by special syntax\n  // such: .databases .tables .show and others\n  console.log(data);\n  // by default, it does the same\n});\n\ndb.on('error', function (message) {\n  // same as `info` but for errors\n  console.error(message);\n  // by default, it does the same\n});\n```\n\n### Raspberry Pi Performance\nThis is the output generated after a `make test` call in this repo folder within Arch Linux for RPi.\n```\nnpm test\n\n> dblite@0.1.2 test /home/dblite\n> node test/.test.js\n\n/home/dblite/dblite.test.sqlite\n------------------------------\nmain\npasses: 1, fails: 0, errors: 0\n------------------------------\ncreate table if not exists\npasses: 1, fails: 0, errors: 0\n------------------------------\n100 sequential inserts\n100 records in 3.067 seconds\npasses: 1, fails: 0, errors: 0\n------------------------------\n1 transaction with 100 inserts\n200 records in 0.178 seconds\npasses: 1, fails: 0, errors: 0\n------------------------------\nauto escape\npasses: 1, fails: 0, errors: 0\n------------------------------\nauto field\nfetched 201 rows as objects in 0.029 seconds\npasses: 1, fails: 0, errors: 0\n------------------------------\nauto parsing field\nfetched 201 rows as normalized objects in 0.038 seconds\npasses: 1, fails: 0, errors: 0\n------------------------------\nmany selects at once\ndifferent selects in 0.608 seconds\npasses: 1, fails: 0, errors: 0\n------------------------------\ndb.query() arguments\n[ [ '1' ] ]\n[ [ '2' ] ]\n[ { id: 1 } ]\n[ { id: 2 } ]\npasses: 5, fails: 0, errors: 0\n------------------------------\nutf-8\n¥ · £ · € · $ · ¢ · ₡ · ₢ · ₣ · ₤ · ₥ · ₦ · ₧ · ₨ · ₩ · ₪ · ₫ · ₭ · ₮ · ₯ · ₹\npasses: 1, fails: 0, errors: 0\n------------------------------\nerease file\npasses: 1, fails: 0, errors: 0\n\n------------------------------\n          15 Passes\n------------------------------\n```\nIf an SD card can do this good, I guess any other environment should not have problems here ;-)\n\n### F.A.Q.\nHere a list of probably common Q&A about this module. Please do not hesitate to ask me more, if necessary, thanks.\n\n  * **How Does It Work?** `dblite` uses a [spawned](http://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) version of the `sqlite3` executable. It could theoretically work with any other SQL like database but it's tested with `sqlite3-shell` only\n  * **Does It Spawn Per Each Query?** this is a quick one: **NO**! `dblite` spawns once per each database file where usually there is only one database file opened per time.\n  * **How About Memory And Performance?** Accordingly with `node` manual:\n  \n    > These child Nodes are still whole new instances of V8.\n    > Assume at least 30ms startup and 10mb memory for each new Node.\n    > That is, you cannot create many thousands of them.\n  \n    Since `dblite` spawns only once, there is a little overhead during the database initialization but that's pretty much it, the amount of RAM increases with the amount of data we save or retrieve from the database. The above **Raspberry Pi Benchmark** should ensure that with most common operation, and using transactions where possible, latency and RAM aren't a real issue.\n  * **Why Not The Native One?** I had some difficulty installing this [node-sqlite3 module](https://github.com/developmentseed/node-sqlite3#name) due `node-gyp` incompatibilities with some **ARM** based device in both *Debian* and *ArchLinux*. Since I really needed an sqlite manager for the next version of [polpetta](https://github.com/WebReflection/polpetta#က-polpetta) which aim is to have a complete, lightweight, and super fast web server in many embedded hardware such RPi, Cubieboard, and others, and since I needed something able to work with multiple core too, I've decided to try this road wrapping the native, easy to install and update, `sqlite3` shell client and do everything I need. So far, so good I would say ;-)\n  * **Isn't `params` and `fields` an ambiguous choice?** At the very beginning I wasn't sure myself if that would have worked as API choice but later on I've changed my mind. First of all, it's very easy to spot special chars in the `SQL` statement. If present, params is mandatory and used, as easy as that. Secondly, if an object has functions as value, it's obviously a `fields` object, 'cause `params` cannot contains functions since these are not compatible with `JSON` serialization, neither meaningful for the database. The only case where `fields` might be confused with `params` is when no `params` has been specified, and `fields` is an `Array`. In this case I believe you are the same one that wrote the SQL too and know upfront if there are fields to retrieve from `params` or not so this is actually a *non real-world* problem and as soon as you try this API you'll realize it feels intuitive and right.\n  * **Are Transactions Supported?** ... **YES**, transactions are supported simply performing multiple queries as you would do in *sqlite3* shell:\n  ```javascript\n    db.query('BEGIN TRANSACTION');\n    for(var i = 0; i < 100; i++) {\n      db.query('INSERT INTO table VALUES(?, ?)', [null, Math.random()]);\n    }\n    db.query('COMMIT');\n  ```\n  The test file has a transaction with 100 records in it, [have a look](test/dblite.js).\n  * **Can I Connect To A `:memory:` Database?** well, you can do anything you would do with `sqlite3` shell so **YES**\n  ```javascript\n  var db = dblite(':memory:'); // that's it!\n  ```\n\n### License\nThe usual Mit Style, thinking about the [WTFPL](http://en.wikipedia.org/wiki/WTFPL) though ... stay tuned for updates.\n\n    Copyright (C) 2013 by WebReflection\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy\n    of this software and associated documentation files (the \"Software\"), to deal\n    in the Software without restriction, including without limitation the rights\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n    copies of the Software, and to permit persons to whom the Software is\n    furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in\n    all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n    THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "dblite@0.2.6",
  "dist": {
    "shasum": "4ac7284e716310f0da46b6daf4db05acf3bdbead"
  },
  "_from": "dblite@0.2.6"
}
