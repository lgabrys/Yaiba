{
  "name": "upnp-device",
  "version": "0.1.2",
  "description": "Create UPnP devices in Node.js",
  "keywords": [
    "upnp"
  ],
  "author": {
    "name": "Jacob Rask",
    "email": "jacob@jacobrask.net"
  },
  "homepage": "https://github.com/jacobrask/node-upnp-device",
  "bugs": "https://github.com/jacobrask/node-upnp-device/issues",
  "main": "./index",
  "directories": {
    "lib": "./lib"
  },
  "engines": {
    "node": ">=0.10.0"
  },
  "dependencies": {
    "async": "*",
    "coffee-script": "1.1.3",
    "mime": "*",
    "node-uuid": "*",
    "redis": "*",
    "underscore": "*",
    "xml": "*",
    "xml2js": "*"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/jacobrask/node-upnp-device/raw/master/LICENSE"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/jacobrask/node-upnp-device.git"
  },
  "contributors": [
    {
      "name": "Eelco Cramer"
    },
    {
      "name": "Andrew Heuermann"
    }
  ],
  "readme": "# UPnP Devices for Node.js\n\nupnp-device lets you create [UPnP Devices][upnp-dcp] in Node.js. The goal is to have an easy to use API, rather than exposing all UPnP internals.\n\n# Limitations\n\n* 2 implemented device specification included: MediaServer:1 and BinaryLight:1\n* MediaServer has only been tested with audio\n\n# Install\n\n`npm install upnp-device`\n\nIn case you want to use the built in media server you also need to install Redis, preferrably using your system package manager.\n\n# Documentation\n\n\n## Basic usage\n\n```javascript\nvar upnp = require('upnp-device');\n\nvar mediaServer = upnp.createDevice('MediaServer', 'My Media Application');\n\nmediaServer.on('ready', function() {\n    mediaServer.addMedia(0, media, function(err, id) {\n        console.log(\"Added new media with ID:\" + id);\n    });\n    mediaServer.ssdpAnnounce();\n});\n```\n\nFor a real world usage example, look at [Bragi], a media server using node-upnp-device.\n\n## API\n\n### upnp.Device\n\n#### Event: 'ready'\n\n`function() { }`\n\nEmitted when the server has been assigned an IP, the HTTP server has started and SSDP messaging has been initialized.\n\n#### Event: 'error'\n\n`function(err) { }`\n\n### upnp.createMyDevice(device, name[, address])\n\nCreate an instance of your own device implementation. Check the examples on how to create your own devices and services.\n\n* implementation - A implementation of a device specified by the [UPnP Forum][upnp-dcp]\n* name - The name of the device as it shows up in the network.\n* address - Optional IP address to bind server to. If the address is omitted an IPv4 address will guessed using the IP configuration\n\n```\nvar myDevice = require('./MyDevice')\n\nvar device = upnp.createMyOwnDevice(myDevice, 'My Device');\n\ndevice.on('ready', function() {\n    device.ssdpAnnounce();\n});\n```\n\n### upnp.createDevice(type, name[, address])\n\n* type - A device specified by the [UPnP Forum][upnp-dcp].\n* name - The name of the device as it shows up in the network.\n* address - Optional IP address to bind server to. If the address is omitted an IPv4 address will guessed using the IP configuration\n\n### device.addMedia(parentID, media[, callback])\n\nApplies to MediaServer.\n\nThe metadata needs to be extracted by the client, either through user input or by reading for example ID3 tags.\n\n* parentID - Parent container of media. 0 means root.\n* properties - Object with class properties. Example below.\n* [callback(err, id)] - Called when all media has been added to the database. Returns the ID of the top container added.\n\n```\ncontainer = {\n    'class': 'object.container.album.musicAlbum',\n    'title': 'My album'\n};\n```\n\n```\nitem = {\n    'class': 'object.container.audioItem.musicTrack',\n    'title': 'My song',\n    'creator': 'An artist',\n    'location': '/media/mp3/an_artist-my_song.mp3',\n    'album': 'My album'\n};\n```\n\nOther official UPnP classes and properties are defined in the [MediaServer specification][upnp-av].\n\nThe server only stores the media info for as long as it is running. It is the responsibility of the client to store media information across restarts if desired.\n\n\n### device.removeMedia(id[, callback])\n\n* id - ID of object to remove. If it has children, they will also be removed.\n* [callback(err)]\n\n\n# Development\n\nupnp-device is written in [CoffeeScript](http://coffeescript.org).\n\nContributions and comments are welcome on GitHub or IRC (jacobrask@FreeNode).\n\n## Acronyms\n\n* **UDA**: [UPnP Device Architecture] [upnp-uda]\n* **DCP**: [UPnP Device Control Protocol] [upnp-dcp]\n* **DIDL**: Digital Item Declaration Language, XML dialect for describing media. To describe content in AV devices, UPnP uses DIDL-Lite, a subset of DIDL.\n* **UPnP AV**: [UPnP Audio/Video] [upnp-av]\n\n\n# See also\n\n * [UPnP.org][upnp]\n * [UPnP client](https://github.com/TooTallNate/node-upnp-client) by @TooTallNate\n * [Gammatron](https://github.com/mattijs/Gammatron) by @mattijs\n\n[upnp]: http://upnp.org\n[upnp-dcp]: http://upnp.org/sdcps-and-certification/standards/sdcps/\n[upnp-uda]: http://upnp.org/sdcps-and-certification/standards/device-architecture-documents/\n[upnp-av]: http://upnp.org/specs/av/av1/\n[bragi]: https://github.com/jacobrask/bragi\n",
  "readmeFilename": "README.md",
  "_id": "upnp-device@0.1.2",
  "_from": "upnp-device"
}
